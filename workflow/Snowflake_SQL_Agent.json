{
  "name": "Snowflake SQL Agent",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -560,
        -260
      ],
      "id": "2c4c8298-057c-4985-9f1c-9e4d812e81a6",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    column_name,\n    data_type,\n    is_nullable,\n    column_default,\n    table_name\nFROM information_schema.columns\nWHERE table_name = '{{ $json.TABLE_NAME }}'\nAND table_schema = 'EMPLOYEE'\norder by ordinal_position;"
      },
      "type": "n8n-nodes-base.snowflake",
      "typeVersion": 1,
      "position": [
        -200,
        -260
      ],
      "id": "5d3760c9-ee33-4d13-92be-714d3e73530a",
      "name": "Schema Extractor",
      "credentials": {
        "snowflake": {
          "id": "UDETXpz3PgXsDWuG",
          "name": "Snowflake account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT table_name\nfrom information_schema.tables\nwhere table_schema = 'EMPLOYEE';"
      },
      "type": "n8n-nodes-base.snowflake",
      "typeVersion": 1,
      "position": [
        -380,
        -260
      ],
      "id": "8dc0ab77-45b5-47ad-a592-964cb01161cb",
      "name": "List All Tables in target DB",
      "credentials": {
        "snowflake": {
          "id": "UDETXpz3PgXsDWuG",
          "name": "Snowflake account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -20,
        -260
      ],
      "id": "7f5b79e5-666b-4e7f-9ef0-194cfa7d5c27",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "employee-data-schema",
        "fileName": "employee_data",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        200,
        -260
      ],
      "id": "48e2767c-d724-4d5d-83de-adb44e62a745",
      "name": "AWS S3",
      "credentials": {
        "aws": {
          "id": "dz9DBSrPIkg6vQmv",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        380
      ],
      "id": "c02d31cb-224c-482f-8ded-0d8e781d8b93",
      "name": "When chat message received",
      "webhookId": "55154cb8-2858-4769-b25d-661217f6d900"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -60,
        380
      ],
      "id": "2b20ad70-4466-4d24-9ef7-dd27d50848e5",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Here is the database schema:  {{ $json.schema }}\n\nHere is the user request: {{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
          "systemMessage": "Assistant is a large language model trained by Deepseek\n\nAssistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nAssistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n\nHelp user to work with the PostgreSQL database. Please help to generate SQL code with the help of the schema information only when necessary, if you can answer without generating  a sql code , don't generate\n\nPlease wrap any sql commands into triple quotes. You don't have a tool to run SQL, so the user will do that instead of you.\n\nPlease provide answers as the same as the input language"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        440,
        380
      ],
      "id": "390e55a5-4048-42fe-9781-33b4492f7a38",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12232b10-ae3e-44f4-a374-caa911b6b543",
              "name": "sessionId",
              "value": "={{ $('When chat message received').item.json.sessionId }}",
              "type": "string"
            },
            {
              "id": "df02daf5-651f-44e4-96c6-d38714219a2b",
              "name": "action",
              "value": "={{ $('When chat message received').item.json.action }}",
              "type": "string"
            },
            {
              "id": "b4b295c1-3f34-4980-9be9-7c1404d0cd5d",
              "name": "chatInput",
              "value": "={{ $('When chat message received').item.json.chatInput }}",
              "type": "string"
            },
            {
              "id": "d76030a2-d555-466a-a2f8-0618bcc42d90",
              "name": "schema",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        380
      ],
      "id": "b9c03562-ea57-48a2-84be-704ad81159ff",
      "name": "Combine schema data and chatinput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "deepseek-chat",
          "mode": "list",
          "cachedResultName": "deepseek-chat"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        540
      ],
      "id": "fe1a476b-0bd1-4a77-a61c-98516557a34c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "02Qfb8FkR8v574no",
          "name": "DeepSeek"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        620,
        540
      ],
      "id": "65ca2fd2-c796-452d-b791-21a771d9e317",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "77940bcf-d208-4c11-b8cc-b583f23dd148",
              "name": "query",
              "value": "={{ ($json.output.match(/SELECT[\\s\\S]*?;/i) || [])[0].trim() || \"\" }}\n\n\n",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        820,
        380
      ],
      "id": "7df9d3df-e891-449c-8e55-2f3dc647bd3d",
      "name": "Extract Query"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "47cc9072-9b78-46e5-b65d-e9a532f3ee79",
              "leftValue": "={{ $json.query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1020,
        380
      ],
      "id": "9f91daed-0b96-4b12-834e-e3795983fd32",
      "name": "Check if query exist"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}"
      },
      "type": "n8n-nodes-base.snowflake",
      "typeVersion": 1,
      "position": [
        1260,
        240
      ],
      "id": "525be14c-23c5-41c6-80a7-a635a376c4ae",
      "name": "SQL Query Execution",
      "credentials": {
        "snowflake": {
          "id": "UDETXpz3PgXsDWuG",
          "name": "Snowflake account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "16ffb05a-323f-40c8-a9e3-a1a9f6b16c39",
              "name": "sqloutput",
              "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1480,
        200
      ],
      "id": "d0668c93-3e6d-4e75-88da-c8480e893ba8",
      "name": "Format Query Result",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1540,
        360
      ],
      "id": "dc109d46-b49f-4d2f-a0d5-9efad8b4b43e",
      "name": "Merge Query Result with Chat Input",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1240,
        480
      ],
      "id": "c87a9738-51f4-41b0-a41f-4893606b02e1",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "bucketName": "employee-data-schema",
        "fileKey": "employee_data"
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -320,
        380
      ],
      "id": "fd591132-4724-4cff-a1bf-2d2d2a3ce942",
      "name": "Download Schema File from S3",
      "credentials": {
        "aws": {
          "id": "dz9DBSrPIkg6vQmv",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "content": "# 🌟 Message & Schema Handling Workflow  \n\n## 🚀 Overview  \nThe AI Agent processes database schema **from a local file**, transforming it into a **JSON object** for improved efficiency.  \n\n## 🔹 Key Benefits  \n- **⚡ Faster Processing**: Avoids slow remote database queries for schema retrieval.  \n- **🔍 Schema Awareness**: The Agent understands the database structure **without accessing actual data**.  \n\n## 🔄 Workflow Steps  \n1. **Extract schema from a local file** → Convert it into **JSON**.  \n2. **Convert DB schema into a long string**.  \n3. **Merge** schema with **Chat Trigger JSON fields** before sending input to the Agent node.  ",
        "height": 675,
        "width": 946,
        "color": 6
      },
      "id": "605fd65f-a031-46b2-98f1-37cd7bb0a4b3",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -600,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 🌟 LangChain AI Agent  \n\n## 🔹 Overview  \nThe **LangChain AI Agent** is designed to **use only the provided database schema** for generating SQL queries.  \n\n## ⚠️ Key Behavior  \n- ✅ **Uses only the schema provided beforehand** to construct queries.  \n- 🚫 **Does not execute** SQL queries directly.  \n- 🔄 **Passes generated SQL queries** to the next node instead of running them.  \n\n",
        "height": 775,
        "width": 386,
        "color": 6
      },
      "id": "51d0d843-7a4e-46da-ae4f-cfb9f7c6eb24",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 🌟 SQL Queries Handling Workflow\n## 🔹 Overview  \nThis **workflow** is designed to **use only the provided SQL query** for extracting data. And the JSON results will translated into human language",
        "height": 755,
        "width": 1226,
        "color": 6
      },
      "id": "43be6544-f585-4307-af50-9c02260888cf",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97b8ecae-4596-4f62-916f-6f4d15bd062a",
              "name": "output",
              "value": "={{ $json.output }}\n\nSQL result:\n```markdown\n{{ $json.sqloutput }}\n```",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1800,
        360
      ],
      "id": "679d4ccb-7d0d-4e23-86ed-f1a53d3fe920",
      "name": "Translate Answer into Human Language"
    },
    {
      "parameters": {
        "content": "# 🌟 Schema Extract Workflow  (Only run once)\n## 🚀 Overview  \nThe processes is designed to get schmea from DB and upload into S3 for storing",
        "height": 280,
        "width": 1100
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -620,
        -420
      ],
      "id": "dfda115f-7878-447a-97a4-97fa0886c663",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "List All Tables in target DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List All Tables in target DB": {
      "main": [
        [
          {
            "node": "Schema Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schema Extractor": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "AWS S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Download Schema File from S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Combine schema data and chatinput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine schema data and chatinput": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Extract Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Query": {
      "main": [
        [
          {
            "node": "Check if query exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if query exist": {
      "main": [
        [
          {
            "node": "SQL Query Execution",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Query Result with Chat Input",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SQL Query Execution": {
      "main": [
        [
          {
            "node": "Format Query Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Query Result": {
      "main": [
        [
          {
            "node": "Merge Query Result with Chat Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Query Result with Chat Input": {
      "main": [
        [
          {
            "node": "Translate Answer into Human Language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Schema File from S3": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate Answer into Human Language": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "37cbcecf-3c83-4c79-a497-8e1e6e4b9e62",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae102f908882b7e3a7234329c037ee9a0892ba5d04ad116b2632756e0bf12be6"
  },
  "id": "VEHnLw3Wd3qsjLF5",
  "tags": []
}